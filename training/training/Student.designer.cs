#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.0
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace training
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RESTransaction")]
	public partial class StudentDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 拡張メソッドの定義
    partial void OnCreated();
    partial void InsertSTUDENT_BASIC(STUDENT_BASIC instance);
    partial void UpdateSTUDENT_BASIC(STUDENT_BASIC instance);
    partial void DeleteSTUDENT_BASIC(STUDENT_BASIC instance);
    partial void InsertSTUDENT_HEALTH(STUDENT_HEALTH instance);
    partial void UpdateSTUDENT_HEALTH(STUDENT_HEALTH instance);
    partial void DeleteSTUDENT_HEALTH(STUDENT_HEALTH instance);
    partial void InsertSTUDENT_SUMMARY(STUDENT_SUMMARY instance);
    partial void UpdateSTUDENT_SUMMARY(STUDENT_SUMMARY instance);
    partial void DeleteSTUDENT_SUMMARY(STUDENT_SUMMARY instance);
    #endregion
		
		public StudentDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RESTransactionConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StudentDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<STUDENT_BASIC> STUDENT_BASIC
		{
			get
			{
				return this.GetTable<STUDENT_BASIC>();
			}
		}
		
		public System.Data.Linq.Table<STUDENT_HEALTH> STUDENT_HEALTH
		{
			get
			{
				return this.GetTable<STUDENT_HEALTH>();
			}
		}
		
		public System.Data.Linq.Table<STUDENT_SUMMARY> STUDENT_SUMMARY
		{
			get
			{
				return this.GetTable<STUDENT_SUMMARY>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STUDENT_BASIC")]
	public partial class STUDENT_BASIC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StudentId;
		
		private char _Gender;
		
		private string _Name;
		
		private EntityRef<STUDENT_HEALTH> _STUDENT_HEALTH;
		
    #region 拡張メソッドの定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    partial void OnGenderChanging(char value);
    partial void OnGenderChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public STUDENT_BASIC()
		{
			this._STUDENT_HEALTH = default(EntityRef<STUDENT_HEALTH>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._STUDENT_HEALTH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1) NOT NULL")]
		public char Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STUDENT_HEALTH_STUDENT_BASIC", Storage="_STUDENT_HEALTH", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public STUDENT_HEALTH STUDENT_HEALTH
		{
			get
			{
				return this._STUDENT_HEALTH.Entity;
			}
			set
			{
				STUDENT_HEALTH previousValue = this._STUDENT_HEALTH.Entity;
				if (((previousValue != value) 
							|| (this._STUDENT_HEALTH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STUDENT_HEALTH.Entity = null;
						previousValue.STUDENT_BASIC = null;
					}
					this._STUDENT_HEALTH.Entity = value;
					if ((value != null))
					{
						value.STUDENT_BASIC = this;
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(string);
					}
					this.SendPropertyChanged("STUDENT_HEALTH");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STUDENT_HEALTH")]
	public partial class STUDENT_HEALTH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StudentId;
		
		private decimal _Height;
		
		private decimal _Weight;
		
		private short _Year;
		
		private System.Nullable<decimal> _IdealWeight;
		
		private EntityRef<STUDENT_BASIC> _STUDENT_BASIC;
		
		private EntityRef<STUDENT_SUMMARY> _STUDENT_SUMMARY;
		
    #region 拡張メソッドの定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(string value);
    partial void OnStudentIdChanged();
    partial void OnHeightChanging(decimal value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(decimal value);
    partial void OnWeightChanged();
    partial void OnYearChanging(short value);
    partial void OnYearChanged();
    partial void OnIdealWeightChanging(System.Nullable<decimal> value);
    partial void OnIdealWeightChanged();
    #endregion
		
		public STUDENT_HEALTH()
		{
			this._STUDENT_BASIC = default(EntityRef<STUDENT_BASIC>);
			this._STUDENT_SUMMARY = default(EntityRef<STUDENT_SUMMARY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Char(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Decimal(5,2) NOT NULL")]
		public decimal Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(5,2) NOT NULL")]
		public decimal Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdealWeight", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> IdealWeight
		{
			get
			{
				return this._IdealWeight;
			}
			set
			{
				if ((this._IdealWeight != value))
				{
					this.OnIdealWeightChanging(value);
					this.SendPropertyChanging();
					this._IdealWeight = value;
					this.SendPropertyChanged("IdealWeight");
					this.OnIdealWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STUDENT_HEALTH_STUDENT_BASIC", Storage="_STUDENT_BASIC", ThisKey="StudentId", OtherKey="StudentId", IsUnique=true, IsForeignKey=false)]
		public STUDENT_BASIC STUDENT_BASIC
		{
			get
			{
				return this._STUDENT_BASIC.Entity;
			}
			set
			{
				STUDENT_BASIC previousValue = this._STUDENT_BASIC.Entity;
				if (((previousValue != value) 
							|| (this._STUDENT_BASIC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STUDENT_BASIC.Entity = null;
						previousValue.STUDENT_HEALTH = null;
					}
					this._STUDENT_BASIC.Entity = value;
					if ((value != null))
					{
						value.STUDENT_HEALTH = this;
					}
					this.SendPropertyChanged("STUDENT_BASIC");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STUDENT_HEALTH_STUDENT_SUMMARY", Storage="_STUDENT_SUMMARY", ThisKey="Year", OtherKey="Year", IsUnique=true, IsForeignKey=false)]
		public STUDENT_SUMMARY STUDENT_SUMMARY
		{
			get
			{
				return this._STUDENT_SUMMARY.Entity;
			}
			set
			{
				STUDENT_SUMMARY previousValue = this._STUDENT_SUMMARY.Entity;
				if (((previousValue != value) 
							|| (this._STUDENT_SUMMARY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STUDENT_SUMMARY.Entity = null;
						previousValue.STUDENT_HEALTH = null;
					}
					this._STUDENT_SUMMARY.Entity = value;
					if ((value != null))
					{
						value.STUDENT_HEALTH = this;
					}
					this.SendPropertyChanged("STUDENT_SUMMARY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STUDENT_SUMMARY")]
	public partial class STUDENT_SUMMARY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Year;
		
		private byte _MaleCount;
		
		private byte _FemaleCount;
		
		private decimal _MaleAvg;
		
		private decimal _FemaleAvg;
		
		private EntityRef<STUDENT_HEALTH> _STUDENT_HEALTH;
		
    #region 拡張メソッドの定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearChanging(short value);
    partial void OnYearChanged();
    partial void OnMaleCountChanging(byte value);
    partial void OnMaleCountChanged();
    partial void OnFemaleCountChanging(byte value);
    partial void OnFemaleCountChanged();
    partial void OnMaleAvgChanging(decimal value);
    partial void OnMaleAvgChanged();
    partial void OnFemaleAvgChanging(decimal value);
    partial void OnFemaleAvgChanged();
    #endregion
		
		public STUDENT_SUMMARY()
		{
			this._STUDENT_HEALTH = default(EntityRef<STUDENT_HEALTH>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					if (this._STUDENT_HEALTH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaleCount", DbType="TinyInt NOT NULL")]
		public byte MaleCount
		{
			get
			{
				return this._MaleCount;
			}
			set
			{
				if ((this._MaleCount != value))
				{
					this.OnMaleCountChanging(value);
					this.SendPropertyChanging();
					this._MaleCount = value;
					this.SendPropertyChanged("MaleCount");
					this.OnMaleCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FemaleCount", DbType="TinyInt NOT NULL")]
		public byte FemaleCount
		{
			get
			{
				return this._FemaleCount;
			}
			set
			{
				if ((this._FemaleCount != value))
				{
					this.OnFemaleCountChanging(value);
					this.SendPropertyChanging();
					this._FemaleCount = value;
					this.SendPropertyChanged("FemaleCount");
					this.OnFemaleCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaleAvg", DbType="Decimal(5,2) NOT NULL")]
		public decimal MaleAvg
		{
			get
			{
				return this._MaleAvg;
			}
			set
			{
				if ((this._MaleAvg != value))
				{
					this.OnMaleAvgChanging(value);
					this.SendPropertyChanging();
					this._MaleAvg = value;
					this.SendPropertyChanged("MaleAvg");
					this.OnMaleAvgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FemaleAvg", DbType="Decimal(5,2) NOT NULL")]
		public decimal FemaleAvg
		{
			get
			{
				return this._FemaleAvg;
			}
			set
			{
				if ((this._FemaleAvg != value))
				{
					this.OnFemaleAvgChanging(value);
					this.SendPropertyChanging();
					this._FemaleAvg = value;
					this.SendPropertyChanged("FemaleAvg");
					this.OnFemaleAvgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STUDENT_HEALTH_STUDENT_SUMMARY", Storage="_STUDENT_HEALTH", ThisKey="Year", OtherKey="Year", IsForeignKey=true)]
		public STUDENT_HEALTH STUDENT_HEALTH
		{
			get
			{
				return this._STUDENT_HEALTH.Entity;
			}
			set
			{
				STUDENT_HEALTH previousValue = this._STUDENT_HEALTH.Entity;
				if (((previousValue != value) 
							|| (this._STUDENT_HEALTH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STUDENT_HEALTH.Entity = null;
						previousValue.STUDENT_SUMMARY = null;
					}
					this._STUDENT_HEALTH.Entity = value;
					if ((value != null))
					{
						value.STUDENT_SUMMARY = this;
						this._Year = value.Year;
					}
					else
					{
						this._Year = default(short);
					}
					this.SendPropertyChanged("STUDENT_HEALTH");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
